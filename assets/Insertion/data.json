{
	"algorithm": "List<int> insertionSort(List<int> list) {\n\t\t\tfor (int j = 1; j < list.length; j++) {\n\t\t\t\t\t\tint key = list[j];\n\t\t\t\t\t\tint i = j - 1;\n\t\t\t\t\t\twhile (i >= 0 && list[i] > key) {\n\t\t\t\t\t\t\t\t\tlist[i + 1] = list[i];\n\t\t\t\t\t\t\t\t\ti = i - 1;list[i + 1] = key;\n\t\t\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn list;\n}",
	"discussion": [
		"Хотя это один из простейших алгоритмов сортировки с наихудшим временем O(n2), сортировка вставкой является предпочтительным алгоритмом, когда данные почти сортируются (потому что они адаптивные) или когда размер проблемы небольшой (потому что низкие накладные расходы).",
		"По этим причинам, а также потому, что он также стабилен, сортировка вставки часто используется в качестве рекурсивного базового случая (когда размер задачи невелик) для алгоритмов сортировки с большим разделением и завоеванием, таких как сортировка слиянием или быстрая сортировка."
	],
	"properties": [
		"Стабильный",
		"O(1) дополнительного пространства",
		"O(n2) сравнений и замен",
		"Адаптивный: O(n) время, когда почти отсортировано",
		"Очень низкие накладные расходы"
	],
	"efficiency": 4.0,
	"animate_targets": {
		"random": 109,
		"nearly_sorted": 29,
		"reversed": 191,
		"few_unique": 80
	}
}