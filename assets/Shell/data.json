{
	"algorithm": "List<int> shellSort(List<int> list) {\n\t\t\tint n = list.length;\n\t\t\tfor (int interval = n / 2; interval > 0; interval /= 2) {\n\t\t\t\t\t\tfor (int i = interval; i < n ; i += 1) {\n\t\t\t\t\t\t\t\t\tint temp = list[i];\n\t\t\t\t\t\t\t\t\tint j;\n\t\t\t\t\t\t\t\t\tfor (j = i; j >= interval && list[j - interval] > temp; j -= interval) {\n\t\t\t\t\t\t\t\t\t\t\t\tlist[j] = list[j - interval];\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tlist[j] = teml;\n\t\t\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn list;\n}",
	"discussion": [
		"Временная сложность сортировки оболочки в худшем случае зависит от последовательности приращений. Для приращений 1 4 13 40 121…, которые используются здесь, временная сложность составляет O(n3 / 2). Для других приращений временная сложность известна как O(n4 / 3) и даже O(n * lg2 (n)). Ни точные верхние границы сложности времени, ни лучшая последовательность приращения не известны.",
		"Поскольку сортировка оболочки основана на сортировке вставкой, сортировка оболочки наследует адаптивные свойства сортировки вставки. Адаптация не так драматична, потому что для сортировки оболочки требуется один проход данных для каждого приращения, но это важно. Для последовательности приращений, показанной выше, есть log3(n) приращений, поэтому временная сложность для почти отсортированных данных составляет O(n * log3 (n)).",
		"Из-за низких издержек, относительно простой реализации, адаптивных свойств и субквадратичной сложности времени сортировка оболочки может быть жизнеспособной альтернативой алгоритмам сортировки O(n * lg(n)) для некоторых приложений, когда сортируемые данные не очень большие"
	],
	"properties": [
		"Нестабильный",
		"O(1) дополнительного пространства",
		"Время O(n3 / 2), как показано (см. Ниже)",
		"Адаптивный: O (n * lg(n)) время, когда почти отсортировано"
	],
	"efficiency": 5.0,
	"animate_targets": {
		"random": 86,
		"nearly_sorted": 52,
		"reversed": 61,
		"few_unique": 66
	}
}